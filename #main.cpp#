IplImage* img = cvLoadImage( "MGC.jpg" );
cvNamedWindow( "Example3-in" );
cvNamedWindow( "Example3-out" );

// Show the original image
cvShowImage("Example3-in", img);

// Create an image for the output
IplImage* out = cvCreateImage( cvGetSize(img), IPL_DEPTH_8U, 3 );

// Perform a Gaussian blur
cvSmooth( img, out, CV_GAUSSIAN, 11, 11 );

// Show the processed image
cvShowImage("Example3-out", out);

cvWaitKey(0);
cvReleaseImage( &img );
cvReleaseImage( &out );
cvDestroyWindow( "Example3-in" );
cvDestroyWindow( "Example3-out" );
return 0;#include <iostream>
#include <stdlib.h>
#include <stdio.h>

/* for opencv */
#include <opencv2/opencv.hpp>
#include <opencv2/highgui/highgui.hpp>

using namespace std;


int main () {


  IplImage* img = cvLoadImage( "MGC.jpg" );
  cvNamedWindow ("test");
  //  CvCapture * capture = cvCaptureFromCam (CV_CAP_ANY);
  //  if (!capture) {
  //    cout << "for some reason you were not able to connect\n";
  //    return -1;
  //  }

  return 0;
}
